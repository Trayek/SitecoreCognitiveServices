@model object
   
@{
    ViewBag.Title = "Content Moderator";
    Layout = "~/Views/CognitiveLaunch/CognitiveLaunchLayout.cshtml";
}

@if (Model != null)
{

}

giphy moderator
https://codepen.io/blaketarter/pen/wBgWbV

<style>
    $blue: #2196F3;
$transition: 300ms ease;

html {
  box-sizing: border-box;
  outline: none;

  *, *:before, *:after {
    box-sizing: inherit;

    &:focus {
      outline: inherit;
    }
  }
}

.title {
  text-align: center;
  font-weight: 200;
  margin-top: 50px;
}

.input-wrapper {
  position: relative;
  width: 90%;
  max-width: 500px;
  margin: 50px auto 0;

  .query {
    height: 50px;
    width: 100%;
    display: block;
    padding: 0 25px;
    border: 1px solid #ccc;

    &:focus {
      outline: none;
      border: 1px solid $blue;

      transition: $transition;
    }

    transition: $transition;
  }

  .loader {
    height: 5px;
    margin: 0;
    padding: 0;
    background: white;
    margin: 0 auto;
    position: relative;

    &:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      background: $blue;
      width: 0%;
      height: 5px;

      transition: $transition;
    }

    &.done {
      &:before {
        width: 100%;
      }
    }
  }

  .clear {
    position: absolute;
    top: 0;
    right: 0;
    height: 50px;
    width: 30px;
    opacity: 1;

    &:before {
      content: '\00d7';
      color: $blue;
      position: absolute;
      top: 0;
      left: 0;
      text-align: center;
      width: 100%;
      line-height: 50px;
      
      transition: $transition;
    }
    
    &:hover {
      &:before {
        cursor: pointer;
      }
    }
  }
  
  &.active {
    margin-top: -55px;
    
    .query {
      height: 30px;
      margin-top: 0px;

      transition: $transition;
    }
    
    .clear {
      height: 30px;
      
      &:before {
        line-height: 30px;
      }
    }
  }
  
  &.empty {
    .clear {
      opacity: 0;
    }
  }
  
  transition: $transition;
}

.result {
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
  padding: 5% 25px 0;
  /* background: #eee; */
  
  img, p.no-results {
    width: 100%;
    max-width: 500px;
    height: auto;
    opacity: 1;
    
    &.hidden {
      opacity: 0;
      
      transition: $transition;
    }
    
    transition: $transition;
  }
  
  p.no-result {
    font-weight: 200;
    
    &.center {
      text-align: center;
    }
  }
}

.random {
  width: 90%;
  max-width: 500px;
  margin: 50px auto;
  height: 50px;
  display: block;
  
  background: $blue;
  color: white;
  border: none;
  
  opacity: 0;
  
  &:hover {
    background: darken($blue, 10%);
  }
  
  &.active {
    opacity: 1;
  }
  
  transition: $transition;
}
</style>
<script>
    const PUBLIC_KEY = 'dc6zaTOxFJmzC';
    const BASE_URL = '//api.giphy.com/v1/gifs/';
    const ENDPOINT = 'search';
    const LIMIT = 1;
    const RATING = 'pg';

    let $queryInput = $('.query');
    let $resultWrapper = $('.result');
    let $loader = $('.loader');
    let $inputWrapper = $('.input-wrapper');
    let $clear = $('.clear');
    let $button = $('.random');
    let currentTimeout;

    let query = {
        text: null,
        offset: 0,
        request() {
            return `${BASE_URL}${ENDPOINT}?q=${this.text}&limit=${LIMIT}&rating=${RATING}&offset=${this.offset}&api_key=${PUBLIC_KEY}`;
        },
        fetch(callback) {
            $.getJSON(this.request())
              .success(data => {
                  let results = data.data;
        
                  if (results.length) {
                      let url = results[0].images.downsized.url;
                      console.log(results);
                      callback(url);
                  } else {
                      callback('');
                  }
              })
              .fail(error => {
                  console.log(error);
              });
        }
    }

    function buildImg(src = '//giphy.com/embed/xv3WUrBxWkUPC', classes = 'gif hidden') {
        return `<img src="${src}" class="${classes}" alt="gif" />`;
    }

        $clear.on('click', e => {
            $queryInput.val('');
            $inputWrapper.removeClass('active').addClass('empty');
            $('.gif').addClass('hidden');
            $loader.removeClass('done');
            $button.removeClass('active');
        });

        $button.on('click', e => {
            query.offset = Math.floor(Math.random() * 25);
  
            query.fetch(url => {
                if (url.length) {
                    $resultWrapper.html(buildImg(url));

                    $button.addClass('active');
                } else {
                    $resultWrapper.html(`<p class="no-results hidden">No Results found for <strong>${query.text}</strong></p>`);

                    $button.removeClass('active');
                }

                $loader.addClass('done');
                currentTimeout = setTimeout(() => {
                    $('.hidden').toggleClass('hidden');
                }, 1000);
            });
        });

        $queryInput.on('keyup', e => {
            let key = e.which || e.keyCode;
            query.text = $queryInput.val();
            query.offset = Math.floor(Math.random() * 25);
  
            if (currentTimeout) {
                clearTimeout(currentTimeout);
                $loader.removeClass('done');
            }
  
            currentTimeout = setTimeout(() => {
                currentTimeout = null;
                $('.gif').addClass('hidden');
    
                if (query.text && query.text.length) {
                    $inputWrapper.addClass('active').removeClass('empty');
      
                    query.fetch(url => {
                        if (url.length) {
                            $resultWrapper.html(buildImg(url));
          
                            $button.addClass('active');
                        } else {
                            $resultWrapper.html(`<p class="no-results hidden">No Results found for <strong>${query.text}</strong></p>`);
          
                            $button.removeClass('active');
                        }
        
                        $loader.addClass('done');
                        currentTimeout = setTimeout(() => {
                            $('.hidden').toggleClass('hidden');
                        }, 1000);
                    });
                } else {
                    $inputWrapper.removeClass('active').addClass('empty');
                    $button.removeClass('active');
                }
            }, 1000);
        });
</script>
<h1 class="title">Giphy API Search</h1>

<div class="input-wrapper empty">
    <input type="text" class="query" />
    <div class="loader"></div>
    <div class="clear"></div>
</div>

<div class="result">
    <p class="no-result center">
        Quick example of the <a href="https://github.com/giphy/GiphyAPI">Giphy Api</a> which is pretty cool if you ask me. Just type in a search phase and get a random related GIF.
        <br /> <br />
        I also decided to go nuts and use <a href="https://github.com/lukehoban/es6features">ES6</a> features (like let, const, fat arrow function syntax and string templates) and the <a href="https://github.com/google/traceur-compiler">Traceur Compiler</a> just to play around with whats coming up in the next generation of javascript, some pretty cool stuff.
        <br /> <br />
        By: Blake Tarter
    </p>
</div>

<button class="random">Get Another GIF</button>